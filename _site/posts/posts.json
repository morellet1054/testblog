[
  {
    "path": "posts/2021-04-20-my-first-new-post/",
    "title": "Functions and plot_ly figures from Flight Data",
    "description": "The following is an assignment I completed which includes sorting a data set to find the desired data, creating functions which can then be reused later, and finally creating figures to represent the data.",
    "author": [
      {
        "name": "Morelle Tinsley",
        "url": "https://www.google.com"
      }
    ],
    "date": "2021-04-20",
    "categories": [],
    "contents": "\n\n\n\nFunctions\nCreate a function that will return the sum of 2 numbers.\n\n\ntwo_two <- function(firstnum, secondnum){\n  \n  result <- sum(firstnum, secondnum) \n  \n  return(result)\n  }\ntwo_two(2,2) #ran the code with two numbers\n\n\n[1] 4\n\nCreate a function that will return the mean of a vector of numbers fed to it.\n-You can see how I first created a function which would calculate a mean, and then later I input a vector of numbers, and the function found its mean for me.\n\n\nmynumbers <- sample(1:100, 10)\n\nmean_function <- function(vector){ \n  \n  result <- mean(vector)\n  \n  return(result)\n}\n\nmean_vector <- c(7,19,245,300,50,89)\n\n\nmean_function(mean_vector)\n\n\n[1] 118.3333\n\nNow, expand on the function you made above, and instead of just returning the number, have it return the sentence:\n“The mean is ___” where the blank is the calculated result.\n\n\nmean_vector <- c(7,19,245,300,50,89)\n\nquestion3 <- function(vector.set) {\n  avg.set <- mean(vector.set)\n  print(paste(\"The mean is\", avg.set))\n}\n\nquestion3(mean_vector)\n\n\n[1] \"The mean is 118.333333333333\"\n\n\n\n#load the data to use for the rest of the assignment questions\nflights <- nycflights13::flights\n\n\n\nUsing the flights dataset from the package nycflights13 loaded in the above cell, create a function that filters the data frame to only include records from a single originating airport (column name origin).\n\n\nhead(flights)\n\n\n# A tibble: 6 x 19\n   year month   day dep_time sched_dep_time dep_delay arr_time\n  <int> <int> <int>    <int>          <int>     <dbl>    <int>\n1  2013     1     1      517            515         2      830\n2  2013     1     1      533            529         4      850\n3  2013     1     1      542            540         2      923\n4  2013     1     1      544            545        -1     1004\n5  2013     1     1      554            600        -6      812\n6  2013     1     1      554            558        -4      740\n# … with 12 more variables: sched_arr_time <int>, arr_delay <dbl>,\n#   carrier <chr>, flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>\n\nsnglorgn <- function(flight_numbers) {\n  flight_numbers %>%\n    filter(origin == \"JFK\")\n}\n\nsnglorgn(flights)\n\n\n# A tibble: 111,279 x 19\n    year month   day dep_time sched_dep_time dep_delay arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>\n 1  2013     1     1      542            540         2      923\n 2  2013     1     1      544            545        -1     1004\n 3  2013     1     1      557            600        -3      838\n 4  2013     1     1      558            600        -2      849\n 5  2013     1     1      558            600        -2      853\n 6  2013     1     1      558            600        -2      924\n 7  2013     1     1      559            559         0      702\n 8  2013     1     1      606            610        -4      837\n 9  2013     1     1      611            600        11      945\n10  2013     1     1      613            610         3      925\n# … with 111,269 more rows, and 12 more variables:\n#   sched_arr_time <int>, arr_delay <dbl>, carrier <chr>,\n#   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#   air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>\n\nSimilarly, using the flights dataset, create a function that:\nfilters the data frame to only include records from a single originating airport (column name origin), and then\naggregates the results by airline (carrier) to show how many flights each airline has from that airport.\n\n\nhead(flights)\n\n\n# A tibble: 6 x 19\n   year month   day dep_time sched_dep_time dep_delay arr_time\n  <int> <int> <int>    <int>          <int>     <dbl>    <int>\n1  2013     1     1      517            515         2      830\n2  2013     1     1      533            529         4      850\n3  2013     1     1      542            540         2      923\n4  2013     1     1      544            545        -1     1004\n5  2013     1     1      554            600        -6      812\n6  2013     1     1      554            558        -4      740\n# … with 12 more variables: sched_arr_time <int>, arr_delay <dbl>,\n#   carrier <chr>, flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>\n\nsnglorgn <- function(flight_numbers) {\n  flight_numbers %>%\n    filter(origin == \"JFK\") %>% \n    count(carrier)\n}\n\n\nsnglorgn(flights)\n\n\n# A tibble: 10 x 2\n   carrier     n\n   <chr>   <int>\n 1 9E      14651\n 2 AA      13783\n 3 B6      42076\n 4 DL      20701\n 5 EV       1408\n 6 HA        342\n 7 MQ       7193\n 8 UA       4534\n 9 US       2995\n10 VX       3596\n\nSimilarly, using the flights dataset, create a function that:\nfilters the data frame to only include records from a single originating airport (column name origin), and then\nfilter to only include flights longer than a specific number of minutes (air_time), and then\naggregates the results by airline (carrier) to show how many flights of that length each airline has from that airport.\n\n\nhead(flights)\n\n\n# A tibble: 6 x 19\n   year month   day dep_time sched_dep_time dep_delay arr_time\n  <int> <int> <int>    <int>          <int>     <dbl>    <int>\n1  2013     1     1      517            515         2      830\n2  2013     1     1      533            529         4      850\n3  2013     1     1      542            540         2      923\n4  2013     1     1      544            545        -1     1004\n5  2013     1     1      554            600        -6      812\n6  2013     1     1      554            558        -4      740\n# … with 12 more variables: sched_arr_time <int>, arr_delay <dbl>,\n#   carrier <chr>, flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>\n\nsnglorgn_plusmore <- function(flight_numbers) {\n  flight_numbers %>%\n    filter(origin == \"JFK\") %>% \n    filter(air_time>400) %>% \n    count(carrier)\n}\n\nsnglorgn_plusmore(flights)\n\n\n# A tibble: 6 x 2\n  carrier     n\n  <chr>   <int>\n1 AA          6\n2 B6          2\n3 DL          7\n4 HA        342\n5 UA          4\n6 VX          4\n\nPlotly charts\nUsing the flights dataset, use plotly to create a bar chart showing the breakdown of flights by airline that originate from JFK airport (origin) and are more than 400 minutes in length (air_time).\nNow we have come to the portion of the assignment where we use sorting and functions to make graphics to show our data.\nBelow, you can see that I created a function which sorted my data, gave it a name, and then imput it into the Plot_ly chart which makes a bar chart from the newly filtered data.\n\n\n\nhead(flights)\n\n\n# A tibble: 6 x 19\n   year month   day dep_time sched_dep_time dep_delay arr_time\n  <int> <int> <int>    <int>          <int>     <dbl>    <int>\n1  2013     1     1      517            515         2      830\n2  2013     1     1      533            529         4      850\n3  2013     1     1      542            540         2      923\n4  2013     1     1      544            545        -1     1004\n5  2013     1     1      554            600        -6      812\n6  2013     1     1      554            558        -4      740\n# … with 12 more variables: sched_arr_time <int>, arr_delay <dbl>,\n#   carrier <chr>, flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>\n\nsnglorgn_plusmore <- function(flight_numbers) { #made a function to filter the data\n  flight_numbers %>%\n    filter(origin == \"JFK\") %>% \n    filter(air_time>400) %>% \n    count(carrier)}\n\nsnglorgn_plusmore(flights)\n\n\n# A tibble: 6 x 2\n  carrier     n\n  <chr>   <int>\n1 AA          6\n2 B6          2\n3 DL          7\n4 HA        342\n5 UA          4\n6 VX          4\n\nJFK_bar <- snglorgn_plusmore(flights)\n\nplot_ly(data = JFK_bar,                    #create a bar chart from it\n        x = ~carrier,\n        y = ~n,\n        type = \"bar\"\n        ) %>% \n  layout(title = \"400 minute flights by carrier from JFK\",\n         xaxis = list(title = \"Carrier\"),\n         yaxis = list (title = \"Number of flights\"))\n\n\n\n{\"x\":{\"visdat\":{\"82b17c581c7\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"82b17c581c7\",\"attrs\":{\"82b17c581c7\":{\"x\":{},\"y\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"bar\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":\"400 minute flights by carrier from JFK\",\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Carrier\",\"type\":\"category\",\"categoryorder\":\"array\",\"categoryarray\":[\"AA\",\"B6\",\"DL\",\"HA\",\"UA\",\"VX\"]},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Number of flights\"},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"showSendToCloud\":false},\"data\":[{\"x\":[\"AA\",\"B6\",\"DL\",\"HA\",\"UA\",\"VX\"],\"y\":[6,2,7,342,4,4],\"type\":\"bar\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}\nUsing the flights dataset, use plotly to create a bar chart showing which destination airports (dest) have the most flights with durations of over 400 minutes (air_time).\n\n\nhead(flights)\n\n\n# A tibble: 6 x 19\n   year month   day dep_time sched_dep_time dep_delay arr_time\n  <int> <int> <int>    <int>          <int>     <dbl>    <int>\n1  2013     1     1      517            515         2      830\n2  2013     1     1      533            529         4      850\n3  2013     1     1      542            540         2      923\n4  2013     1     1      544            545        -1     1004\n5  2013     1     1      554            600        -6      812\n6  2013     1     1      554            558        -4      740\n# … with 12 more variables: sched_arr_time <int>, arr_delay <dbl>,\n#   carrier <chr>, flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>\n\ndest_count <- function(flight_numbers) {\n  flight_numbers %>%\n    filter(air_time>400) %>% \n    count(dest)}\n\ndest_count(flights)\n\n\n# A tibble: 7 x 2\n  dest      n\n  <chr> <int>\n1 ANC       7\n2 BUR       1\n3 HNL     701\n4 LAX       5\n5 SAN       3\n6 SFO      23\n7 SNA       1\n\nDest_bar <- dest_count(flights)\n\nplot_ly(data = Dest_bar,\n        x =~dest,\n        y = ~n,\n        type = \"bar\") %>% \n  layout(title = \"Destinations with most 400 minute flights\",\n         xaxis = list(title = \"Destination\"),\n         yaxis = list (title = \"Number of flights\"))\n\n\n\n{\"x\":{\"visdat\":{\"82b30810719\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"82b30810719\",\"attrs\":{\"82b30810719\":{\"x\":{},\"y\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"bar\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":\"Destinations with most 400 minute flights\",\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Destination\",\"type\":\"category\",\"categoryorder\":\"array\",\"categoryarray\":[\"ANC\",\"BUR\",\"HNL\",\"LAX\",\"SAN\",\"SFO\",\"SNA\"]},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Number of flights\"},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"showSendToCloud\":false},\"data\":[{\"x\":[\"ANC\",\"BUR\",\"HNL\",\"LAX\",\"SAN\",\"SFO\",\"SNA\"],\"y\":[7,1,701,5,3,23,1],\"type\":\"bar\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}\nUsing the flights dataset, use plotly to create a donut chart showing the share of flights each airline has for flights with a destination of Daniel K. Inouye International Airport (HNL) in Honolulu.\n\n\nHNL_share <- function(flight_numbers){\n  flight_numbers %>% \n    count(dest == \"HNL\")\n}\n\n\n\n\n\nhead(flights)\n\n\n# A tibble: 6 x 19\n   year month   day dep_time sched_dep_time dep_delay arr_time\n  <int> <int> <int>    <int>          <int>     <dbl>    <int>\n1  2013     1     1      517            515         2      830\n2  2013     1     1      533            529         4      850\n3  2013     1     1      542            540         2      923\n4  2013     1     1      544            545        -1     1004\n5  2013     1     1      554            600        -6      812\n6  2013     1     1      554            558        -4      740\n# … with 12 more variables: sched_arr_time <int>, arr_delay <dbl>,\n#   carrier <chr>, flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>\n\nflights %>% \n  filter(dest ==\"HNL\") %>% \n  count(carrier) \n\n\n# A tibble: 2 x 2\n  carrier     n\n  <chr>   <int>\n1 HA        342\n2 UA        365\n\n\n\n\n\n\ncarrier_count <- function(data){\nresults <- data %>% \n    filter(dest == \"HNL\") %>% \n  count(carrier) \n\nreturn(results)\n}\n\n\n\n\n\nhonolulu_donut <- carrier_count(flights)\n\n\n\n\n\nfig <- honolulu_donut %>% plot_ly(labels = ~carrier, values = ~n)\n\nfig <- fig %>% add_pie(hole = 0.6) #would make a pie chart, to make a donut chart add the hole\n\nfig <- fig %>% layout(\n                  title = \"Number of HNL flights by carrier\",  showlegend = F,\n                  xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),\n                  yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))\nfig\n\n\n\n{\"x\":{\"visdat\":{\"82b351b3a50\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"82b351b3a50\",\"attrs\":{\"82b351b3a50\":{\"labels\":{},\"values\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"pie\",\"hole\":0.6,\"inherit\":true}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":\"Number of HNL flights by carrier\",\"showlegend\":false,\"xaxis\":{\"showgrid\":false,\"zeroline\":false,\"showticklabels\":false},\"yaxis\":{\"showgrid\":false,\"zeroline\":false,\"showticklabels\":false},\"hovermode\":\"closest\"},\"source\":\"A\",\"config\":{\"showSendToCloud\":false},\"data\":[{\"labels\":[\"HA\",\"UA\"],\"values\":[342,365],\"type\":\"pie\",\"hole\":0.6,\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(255,255,255,1)\"}},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}\nUsing the flights dataset, use plotly to create a scatterplot chart for flights with a destination of Daniel K. Inouye International Airport (HNL) in Honolulu, that shows the relationship between the departure delay (dep_delay) and arrival delay (arr_delay).\n\n\nhead(flights)\n\n\n# A tibble: 6 x 19\n   year month   day dep_time sched_dep_time dep_delay arr_time\n  <int> <int> <int>    <int>          <int>     <dbl>    <int>\n1  2013     1     1      517            515         2      830\n2  2013     1     1      533            529         4      850\n3  2013     1     1      542            540         2      923\n4  2013     1     1      544            545        -1     1004\n5  2013     1     1      554            600        -6      812\n6  2013     1     1      554            558        -4      740\n# … with 12 more variables: sched_arr_time <int>, arr_delay <dbl>,\n#   carrier <chr>, flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>\n\ndelay_data <- flights %>% \n  filter(dest == \"HNL\")\n\n\n\n\n\ndelay_plot_ly<- plot_ly(data = delay_data, x = ~dep_delay, y = ~arr_delay)\n\ndelay_scatter <- plot_ly(data = delay_data, x = ~dep_delay, y = ~arr_delay) %>% \n  layout(title = \"Honolulu Arrival Delays According to Departure Delays\")\n\ndelay_scatter\n\n\n\n{\"x\":{\"visdat\":{\"82b77def410\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"82b77def410\",\"attrs\":{\"82b77def410\":{\"x\":{},\"y\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20]}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":\"Honolulu Arrival Delays According to Departure Delays\",\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"dep_delay\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"arr_delay\"},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"showSendToCloud\":false},\"data\":[{\"x\":[-3,0,9,0,14,37,0,2,-2,-6,79,12,102,-1,1,3,1301,-1,-1,1,-5,38,1,4,-4,1,-1,0,-4,24,-2,18,-1,16,123,3,-6,-3,0,42,-7,-1,-7,46,101,-4,-6,-1,20,254,1,6,-1,102,-4,78,-5,-1,-5,5,-2,8,12,-9,-3,11,-6,7,2,-5,-2,6,-3,2,6,-9,0,-3,-7,-5,-5,19,-13,-1,-10,0,-4,0,0,2,-3,-2,-4,11,-6,3,-6,25,12,-8,-2,-3,-4,-3,4,4,-7,-8,0,-5,-7,-11,-1,4,-9,25,-10,4,-9,0,2,5,-6,-3,-9,-7,0,-12,0,1,-2,-3,5,-3,6,-5,2,84,9,-7,-9,-3,28,-4,-14,-4,-4,-4,-7,6,9,-11,-9,-10,-7,31,-11,21,-1,-10,3,-16,-1,-11,-3,-4,-6,9,-6,-2,2,-10,7,3,3,4,-10,-3,-6,2,-3,5,5,22,-2,3,44,0,0,3,-1,7,-5,290,3,82,-1,20,3,213,-2,218,-6,61,-4,84,-3,118,-5,60,-7,40,4,24,-6,19,-3,14,-8,8,3,34,-10,24,-7,31,-8,5,-5,29,-2,41,-3,14,-3,0,0,15,-7,-5,0,-1,-6,19,186,30,-3,-3,1,-1,-2,1,22,-4,-5,-2,-5,-8,-2,4,-5,14,10,-3,-3,-9,-4,-5,-5,-3,-2,206,25,36,-4,-2,-2,60,0,24,-1,24,29,4,-5,25,0,1,4,19,10,-8,-5,-5,-5,-5,17,48,40,-2,27,1,4,-7,1,-3,59,-3,-2,-2,-3,1,7,1,-4,6,2,-1,75,-4,4,-2,-13,19,50,-10,115,0,-5,-3,-6,1,11,-10,1,-3,14,-6,19,-5,5,-2,-6,-9,7,0,12,-2,167,-3,-1,6,3,-6,-4,-3,36,-5,-5,-4,8,-5,12,-2,61,-7,2,-3,13,-5,0,53,0,-12,-7,11,-1,-6,-6,21,-1,5,-7,7,-10,2,4,7,-8,-1,-4,-2,-4,4,3,2,-11,13,-6,-3,-2,29,-5,263,0,-3,-7,3,1,-5,-2,5,0,-2,-4,-6,-1,15,1,7,-3,-2,-7,-3,-6,11,-5,-1,-4,1,-1,1,-9,1,-6,-4,-2,7,-5,0,-1,1,2,0,-4,0,-2,2,-7,-2,-5,41,-8,8,55,-4,-2,-2,-7,0,-7,-5,-12,23,13,-4,-5,0,-4,8,-3,1,-10,24,6,4,44,5,-8,2,-9,6,-12,-4,-5,8,-8,9,-1,-4,113,20,-2,-3,2,11,-5,2,10,11,-8,-4,-3,-6,0,-5,-5,-2,-8,38,-1,-5,-9,44,1,3,-6,7,-3,-5,-5,-8,-7,14,-5,2,5,83,-8,-3,40,-10,65,-10,36,-4,2,88,-3,2,-9,13,-2,7,-9,-2,-3,-4,-2,-2,-6,-1,-7,2,-8,10,-5,40,-7,6,-8,5,0,-4,-5,2,-1,73,-5,97,-2,31,-5,-1,-4,-1,-7,10,-4,-8,-3,-2,5,-4,2,-8,93,-4,1,3,20,-8,138,3,4,-2,0,-3,11,-10,-2,5,-2,-1,-3,-10,-3,-7,-1,-4,0,-6,-1,-3,9,-4,-2,-1,-1,29,7,-9,6,-10,-2,11,4,-7,-2,-7,-2,-7,5,134,1,-6,4,0,0,-3,88,-5,5,-6,5,-2,-2,-7,-5,-4,2,-5,0,-15,-2,-10,-6,-5,4,-7,4,-1,18,-2,-4,-15,5,-5,-3,1,-7,15,-5,-2,2,3,-3,-4,1,-7,3,-4,-4,1,-6,5,-8,4,-5,24,-3,1,-1,-9,-6,-5,-2,-3,51,-1,6],\"y\":[-14,21,-5,-4,-26,31,-14,-3,-11,-45,28,-14,50,-10,-26,16,1272,44,-41,0,-48,17,-38,-22,-7,-33,-34,-15,-51,13,-20,42,-17,33,65,-3,-32,-45,-38,62,-31,8,-24,38,82,3,-10,25,9,299,6,6,-26,107,-17,98,-26,-10,-49,-17,-55,-20,7,-12,-25,-10,-12,-17,-32,-26,-35,-3,14,48,-15,-31,-22,-28,-21,-19,-15,-1,-18,-22,0,-8,-23,-7,-31,-11,-1,1,3,-11,-8,-15,-9,4,0,-19,-14,-9,-28,-35,-15,-17,-12,-50,-24,-25,-37,-21,-22,-2,-10,17,7,-3,-18,-18,3,19,2,33,14,16,-1,-5,19,19,9,30,-12,32,60,39,-5,37,-7,-9,-10,-1,27,-10,-8,-6,4,5,22,44,28,13,-3,1,-10,4,-31,-4,-20,-13,-15,-16,-22,-19,-44,-42,-8,-46,-22,-3,-19,-10,-4,0,-16,-10,34,19,10,41,14,7,-15,6,-7,6,125,4,-24,-6,-8,-13,-2,285,-8,41,-21,2,18,177,8,189,-45,31,-27,47,-34,76,-18,4,-31,20,-20,1,-15,-1,-14,-9,-22,1,-15,-7,-22,6,1,28,2,-2,-58,9,-60,-9,-54,1,-19,0,15,54,2,12,-12,6,-39,47,154,-8,-60,-70,-29,-59,-48,-59,5,-37,-24,-64,-36,-60,-34,-56,-40,-19,-9,-43,-11,-30,-11,-31,3,-64,-32,126,-3,-33,-29,-53,-24,-27,-70,-52,-45,-45,-10,-62,-34,-14,-21,-21,18,1,-7,-31,8,-41,-4,-29,30,35,60,-33,-2,-16,-6,-4,-5,-30,76,-27,-11,12,25,21,48,14,37,37,61,1,98,-17,-3,-21,-8,-1,14,-37,129,-1,11,-21,13,-19,1,-43,-12,-30,-1,-44,-4,-58,-24,-28,6,-30,17,-20,19,-13,204,25,0,-8,0,-5,-6,0,-2,-13,-13,-27,-12,-41,-14,-44,113,-44,-36,-26,5,-7,5,38,-8,-12,-27,5,-30,-17,16,-18,-20,0,-22,11,-25,-9,18,32,1,16,-3,-1,-6,5,-31,-30,-56,-24,-52,-24,-35,5,-43,238,-30,-32,-37,-31,-36,-55,-39,-40,-24,-23,-62,-58,-59,-26,25,1,-1,-37,-19,-11,-4,7,-32,-12,-37,-19,-27,-11,-17,2,-35,-7,-12,1,-21,-20,-6,7,3,3,-14,10,-7,8,-4,82,-25,34,-14,-2,21,-18,-40,-14,-13,3,-32,11,-31,23,-24,-10,-10,-11,7,0,-3,-10,-3,-16,-3,-29,6,-38,-41,-33,-43,-1,-19,-7,1,-18,1,-1,21,-4,134,25,10,6,24,8,29,-11,38,6,1,69,10,-8,10,3,-3,-10,-19,6,-9,-13,11,99,-2,0,-14,0,-24,-15,-9,-18,-26,-3,-20,-1,57,34,-28,-20,3,-31,34,-7,9,0,-19,83,-9,-10,-5,11,12,21,-4,2,-12,-1,10,-11,-15,-5,-19,-7,-15,2,-16,24,-9,-4,-21,9,11,-9,18,14,5,62,9,134,5,28,7,28,18,-1,10,0,9,-35,12,22,-2,16,-1,3,66,-8,2,12,2,0,116,11,-11,17,3,14,2,20,-1,23,-2,20,2,-2,-7,4,0,20,6,3,-11,-17,-6,-10,-32,-24,-25,14,-29,-33,-5,-16,-29,13,-5,34,-18,-2,-6,-22,-2,125,5,-27,-13,-21,-25,-2,52,-9,-28,-12,-24,8,-23,-22,-29,-20,-7,-27,-16,-44,-26,-21,-40,-46,-18,-38,-37,-32,-4,-18,-26,-43,-38,-26,-4,-9,-29,-10,-28,-15,-3,-10,7,-5,-4,2,-4,-11,-4,-10,-19,-43,-6,2,-8,1,-3,23,8,-3,3,-33,-63,-40,4,-7,-11],\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"line\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}\n```\n\n\n\n",
    "preview": {},
    "last_modified": "2021-04-20T16:42:52+00:00",
    "input_file": "my-first-new-post.utf8.md"
  },
  {
    "path": "posts/2021-04-20-my-second-new-post/",
    "title": "My Second New Post",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Morelle Tinsley",
        "url": "https://www.google.com"
      }
    ],
    "date": "2021-04-20",
    "categories": [],
    "contents": "\nDistill is a publication format for scientific and technical writing, native to the web.\nLearn more about using Distill at https://rstudio.github.io/distill.\nType type type\nI am writing for my new site.\nThe link to the class Trello board.\nHere’s an image of my mom’s new puppy: \n\n\n\n",
    "preview": {},
    "last_modified": "2021-04-20T14:43:15+00:00",
    "input_file": {}
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to Morelle's Website",
    "description": "Welcome to my new site, I'm so excited that it's working!",
    "author": [
      {
        "name": "Morelle Tinsley",
        "url": "https://www.google.com"
      }
    ],
    "date": "2021-04-13",
    "categories": [],
    "contents": "\n\n\n\n",
    "preview": {},
    "last_modified": "2021-04-20T14:30:40+00:00",
    "input_file": {}
  }
]
